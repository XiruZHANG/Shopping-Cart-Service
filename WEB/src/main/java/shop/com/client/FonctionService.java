package shop.com.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.5.5
 * 2023-04-14T23:01:27.009+02:00
 * Generated source version: 3.5.5
 *
 */
@WebServiceClient(name = "fonctionService",
                  wsdlLocation = "file:/D:/eclipse-jee-2022-12-R-win32-x86_64/workspace/WEB/src/main/webapp/wsdl/fonction.wsdl",
                  targetNamespace = "http://www.com.shop")
public class FonctionService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.com.shop", "fonctionService");
    public final static QName FonctionPort = new QName("http://www.com.shop", "fonctionPort");
    static {
        URL url = null;
        try {
            url = new URL("file:/D:/eclipse-jee-2022-12-R-win32-x86_64/workspace/WEB/src/main/webapp/wsdl/fonction.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(FonctionService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/D:/eclipse-jee-2022-12-R-win32-x86_64/workspace/WEB/src/main/webapp/wsdl/fonction.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public FonctionService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public FonctionService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public FonctionService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public FonctionService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public FonctionService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public FonctionService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns Fonction
     */
    @WebEndpoint(name = "fonctionPort")
    public Fonction getFonctionPort() {
        return super.getPort(FonctionPort, Fonction.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Fonction
     */
    @WebEndpoint(name = "fonctionPort")
    public Fonction getFonctionPort(WebServiceFeature... features) {
        return super.getPort(FonctionPort, Fonction.class, features);
    }

}
